// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MutationResult interface {
	IsMutationResult()
}

type AuthorizeUserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type AuthorizeUserResult struct {
	Success     bool   `json:"success"`
	Message     string `json:"message"`
	AccessToken string `json:"accessToken"`
}

func (AuthorizeUserResult) IsMutationResult() {}

type Comment struct {
	Content string            `json:"content"`
	Effect  *ReputationEffect `json:"effect"`
}

type Game struct {
	Name   string            `json:"name"`
	Genre  string            `json:"genre"`
	Hours  *float64          `json:"hours"`
	Effect *ReputationEffect `json:"effect"`
}

type Photo struct {
	Filename string            `json:"filename"`
	Path     string            `json:"path"`
	Effect   *ReputationEffect `json:"effect"`
}

type ReputationEffect struct {
	Effect *Effect `json:"effect"`
	Detail *string `json:"detail"`
}

type Source struct {
	Type SourceType `json:"type"`
}

type Effect string

const (
	EffectPositive Effect = "POSITIVE"
	EffectNeutral  Effect = "NEUTRAL"
	EffectNegative Effect = "NEGATIVE"
)

var AllEffect = []Effect{
	EffectPositive,
	EffectNeutral,
	EffectNegative,
}

func (e Effect) IsValid() bool {
	switch e {
	case EffectPositive, EffectNeutral, EffectNegative:
		return true
	}
	return false
}

func (e Effect) String() string {
	return string(e)
}

func (e *Effect) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Effect(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Effect", str)
	}
	return nil
}

func (e Effect) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SourceType string

const (
	SourceTypeSocialNetwork SourceType = "SOCIAL_NETWORK"
	SourceTypeGamesPlatform SourceType = "GAMES_PLATFORM"
)

var AllSourceType = []SourceType{
	SourceTypeSocialNetwork,
	SourceTypeGamesPlatform,
}

func (e SourceType) IsValid() bool {
	switch e {
	case SourceTypeSocialNetwork, SourceTypeGamesPlatform:
		return true
	}
	return false
}

func (e SourceType) String() string {
	return string(e)
}

func (e *SourceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SourceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SourceType", str)
	}
	return nil
}

func (e SourceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
